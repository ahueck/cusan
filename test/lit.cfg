import os
import lit.util
import lit.formats

# From libcxx lit: Tell pylint that we know config and lit_config exist somewhere.
if "PYLINT_IMPORT" in os.environ:
    config = object()
    lit_config = object()

config.name = "cusanTest"

loaded_site_cfg = getattr(config, "loaded_site_config", False)
if not loaded_site_cfg:
    site_cfg = lit_config.params.get("cusan_site_config", None)
    if site_cfg and os.path.exists(site_cfg):
        lit_config.load_config(config, site_cfg)
        raise SystemExit

config.test_format = lit.formats.ShTest(execute_external=True)
config.suffixes = [".c", ".cpp"]
config.excludes = ["Inputs"]

config.test_exec_root = config.cusan_build_dir + "/tests"

cusan_lib_dir = getattr(config, "cusan_lib_dir", None)
cusan_pass_dir = getattr(config, "cusan_pass_dir", None)
cusan_pass_name = getattr(config, "cusan_pass", None)
cusan_runtime_dir = getattr(config, "cusan_runtime_dir", None)
cusan_script_dir = getattr(config, "cusan_script_dir", None)

cusan_std_args = "-cusan"
cusan_pass = "{}/{}".format(cusan_pass_dir, cusan_pass_name)
to_llvm_args = "-O1 -g -Xclang -disable-llvm-passes -S -emit-llvm -o -"

clang_cpp = getattr(config, "clang_cpp", "clang++")
clang_cc = getattr(config, "clang", "clang")
llc = getattr(config, "llc", "llc")
filecheck = getattr(config, "filecheck", "FileCheck")
if config.opt_args:
    opt = "{} {}".format(getattr(config, "opt", "opt"), config.opt_args)
else:
    opt = "{}".format(getattr(config, "opt", "opt"))

config.substitutions.append(("%clang-cpp", clang_cpp))
config.substitutions.append(("%clang-cc", clang_cc))
config.substitutions.append(("%opt", opt))
config.substitutions.append(("%filecheck", filecheck + " --dump-input fail"))

config.substitutions.append(("%lib_dir", cusan_lib_dir))
config.substitutions.append(("%pass_dir", cusan_pass_dir))
if cusan_runtime_dir is not None:
    config.substitutions.append(("%runtime_dir", cusan_runtime_dir))

config.substitutions.append(("%pass_name", cusan_pass_name))
config.substitutions.append(("%pass_plugin", cusan_pass))

config.substitutions.append(("%arg_std", cusan_std_args))

config.substitutions.append(
    ("%apply-cusan", "{} -load {} {}".format(opt, cusan_pass, cusan_std_args))
)

config.substitutions.append(("%c-to-llvm", "{} {}".format(clang_cc, to_llvm_args)))
config.substitutions.append(("%cpp-to-llvm", "{} {}".format(clang_cpp, to_llvm_args)))

if cusan_script_dir is not None:
    config.substitutions.append(("%script_dir", cusan_script_dir))
    config.substitutions.append(("%run", "{}/run.sh".format(cusan_script_dir)))
    config.substitutions.append(("%apply", "{}/apply.sh".format(cusan_script_dir)))

config.substitutions.append(("%cusan_test_dir", config.test_exec_root))

config.substitutions.append(('%wrapper-cc', '{}/cusan-clang-test'.format(cusan_script_dir)))
config.substitutions.append(('%wrapper-cxx', '{}/cusan-clang++-test'.format(cusan_script_dir)))
config.substitutions.append(('%wrapper-mpicc', '{}/cusan-mpicc-test'.format(cusan_script_dir)))
config.substitutions.append(('%wrapper-mpicxx', '{}/cusan-mpic++-test'.format(cusan_script_dir)))
config.substitutions.append(('%mpi-exec', '{}'.format(config.mpiexec)))

config.substitutions.append(('%tsan-compile-flags', '-fsanitize=thread'))
config.substitutions.append(('%tsan-options', 'TSAN_OPTIONS="exitcode=0 suppressions=%S/suppressions.txt"'))
config.substitutions.append(('%cusan_ldpreload', 'LD_PRELOAD="{}"'.format(config.cusan_mpi_interceptor)))