#!/bin/bash
#
# cucorr library
#

function parse_cuda_cmd_line() {
  typeart_non_cuda_args=""
  found_cuda=0
  cuda_code_arch="sm_50"
  cuda_compute_arch="compute_50"
  show_cuda_ir=0

  while (("$#")); do
    case "$1" in
    -x)
      if [ "$2" == "cuda" ]; then
        found_cuda=1
      else
        typeart_non_cuda_args="$typeart_non_cuda_args $1 $2"
      fi
      shift 2
      ;;
    --cuda-gpu-arch=*)
      cuda_code_arch="${1##--cuda-gpu-arch=}"
      cuda_compute_arch="compute${cuda_code_arch##sm}"
      shift 1
      ;;
    --show_cuda_ir)
      show_cuda_ir=1
      shift 1
      ;;
    *) # preserve other arguments
      typeart_non_cuda_args="$typeart_non_cuda_args $1"
      shift
      ;;
    esac
  done
  # set other positional arguments in their proper place
  set -- "typeart_non_cuda_args"
}

function cucorr_parse_cmd_line() {
  readonly source_file=$1
  optimize=""
  with_omp=0
  compile_flags=""
  show_cuda_ir=0
  show_cuda_host_ir=0

  shift # skip over $1
  while (("$#")); do
    case "$1" in
    -o | --optimization)
      if [ -n "$2" ] && [ "${2:0:2}" == "-O" ]; then
        optimize=$2
        shift 2
      else
        echo "Error: Optimization argument for $1 is erroneous: $2" >&2
        exit 1
      fi
      ;;
    --object)
      if [ -n "$2" ]; then
        object_file="$2"
        shift 2
      else
        echo "Error: Object file argument for $1 is missing." >&2
        shift
      fi
      ;;
    --executable)
      if [ -n "$2" ]; then
        exe_file="$2"
        shift 2
      else
        echo "Error: Executable file argument for $1 is missing." >&2
        shift
      fi
      ;;
    --omp)
      with_omp=1
      shift
      ;;
    --compile_flags)
      if [ -n "$2" ]; then
        compile_flags="$2"
        shift 2
      else
        echo "Error: argument for $1 is missing." >&2
        shift
      fi
    ;;
    --show_ir)
      show_cuda_ir=1
      shift
    ;;
    --show_host_ir)
      show_cuda_host_ir=1
      shift
    ;;
    *) # preserve other arguments
      more_args="$more_args $1"
      shift
      ;;
    esac
  done

  if [ -z "${compile_flags}" ]; then
    compile_flags=""
  fi

  if [ -z "${object_file}" ]; then
    # use filename(source_file).o
    object_file="${source_file%.*}".o
  fi

  if [ -z "${exe_file}" ]; then
    # use filename(source_file).o
    exe_file="${source_file%.*}".exe
  fi

  if [ -z "${optimize}" ]; then
    optimize=-O0
  fi
}

function cucorr_global_init() {
  typeart_global_init

  local -r cucorr_bin_dir="@CUCORR_BINARY_DIR@"
  local -r cucorr_lib_dir="@CUCORR_RT_DIR@"
  local -r cucorr_include_dir="@CUCORR_INCLUDE_DIRS@"
  local -r cucorr_pass="@CUCORR_PASS_DIR@/$<TARGET_FILE_NAME:cucorr::TransformPass>"
  #export LD_PRELOAD="$<TARGET_FILE_BASE_NAME:cucorr::MPI_Interceptor>":$LD_PRELOAD
  readonly cucorr_ldflags="-L${cucorr_lib_dir}/ \
                   -Wl,-rpath,${cucorr_lib_dir}/ \
                   -l$<TARGET_FILE_BASE_NAME:cucorr::Runtime>"

  readonly cucorr_includes="${cucorr_include_dir}"
  readonly cucorr_plugin="-load "${cucorr_pass}" -cucorr"
  readonly cucorr_cpu_mode=""
  readonly cucorr_gpu_mode=""
}

function typeart_global_init() {
  local -r typeart_bin_dir="@TYPEART_BINARY_DIR@"
  local -r typeart_lib_dir="@TYPEART_RT_DIR@"
  local -r typeart_include_dir="@TYPEART_INCLUDE_DIRS@"
  local -r typeart_pass="@TYPEART_PASS_DIR@/$<TARGET_FILE_NAME:typeart::TransformPass>"
  readonly typeart_interceptor="@TYPEART_MPI_INTERCEPT_DIR@/@TYPEART_MPI_TOOL@"


  readonly opt_tool="@TYPEART_OPT@"
  readonly llc_tool="@TYPEART_LLC@"

  readonly typeart_includes="${typeart_include_dir}"
  readonly typeart_ldflags="-L${typeart_lib_dir}/ \
                   -Wl,-rpath,${typeart_lib_dir}/ \
                   -l$<TARGET_FILE_BASE_NAME:typeart::Runtime>"

  # shellcheck disable=SC2027
  readonly typeart_plugin="-load "${typeart_pass}" -typeart"
  readonly typeart_stack_mode_args="-typeart-heap=false -typeart-stack -typeart-stats"
  readonly typeart_heap_mode_args="-typeart-heap=true -typeart-stats"
  readonly typeart_combined_mode_args="${typeart_heap_mode_args} -typeart-stack"
}

function cucorr_toolchain_init() {
  readonly extension="${source_file##*.}"

  case "$extension" in
  c)
    compiler=@CUCORR_CLANG_EXEC@
    if [ $with_omp == 1 ]; then
      readonly omp_flags="@OpenMP_C_FLAGS@"
    fi
    ;;
  cc | cxx | cpp)
    compiler=@CUCORR_CLANGCXX_EXEC@
    if [ $with_omp == 1 ]; then
      readonly omp_flags="@OpenMP_CXX_FLAGS@"
    fi
    ;;
  esac

  readonly cucorr_san_flags="@CUCORR_SAN_FLAGS@ -fsanitize=thread"
}

function cucorr_make_ir() {
  local cuda_add_flag="$1"
  $compiler ${cuda_add_flag} ${omp_flags} ${typeart_includes} ${cucorr_include_dir} ${cucorr_san_flags} \
   -O0 -Xclang -disable-O0-optnone -g ${compile_flags} -S -emit-llvm "${source_file}" -o - |
   $opt_tool -mem2reg -S
    # -O1 -Xclang -disable-llvm-passes -g ${compile_flags} -S -emit-llvm "${source_file}" -o -
  
}

function cucorr_source_to_llvm() {
  local cuda_add_flag=""
  if [ $found_cuda == 1 ]; then
    cuda_add_flag=""
    cuda_add_flag+=" -x cuda"
    if [ $show_cuda_ir == 1 ]; then
      cuda_add_flag+=" --cuda-device-only --cuda-gpu-arch=${cuda_code_arch}"
    elif [ $show_cuda_host_ir == 1 ]; then
      cuda_add_flag+=" --cuda-host-only"
      # generate kernel data, workaround
      cucorr_device_pass no_out
    fi
  fi
  cucorr_make_ir "${cuda_add_flag}"
}

function cucorr_device_pass() {
    local no_out=${1:-yes}
    if [ "$no_out" == "no_out" ]; then
        more_args+=" -disable-output"
    else
        more_args+=" -S"
    fi
    cucorr_make_ir "-x cuda --cuda-device-only --cuda-gpu-arch=${cuda_code_arch}" |
    $opt_tool ${cucorr_plugin} ${more_args}
}

function cucorr_apply_pass() {
  cucorr_source_to_llvm |
    $opt_tool ${typeart_plugin} ${typeart_heap_mode_args} ${ta_more_args} -S |
    $opt_tool ${cucorr_plugin} ${more_args} -S |
    # $opt_tool  -passes="tsan-module,tsan" -S |
    $opt_tool ${typeart_plugin} ${typeart_stack_mode_args} ${ta_more_args} -S 
}

function cucorr_apply_pass_optim() {
  cucorr_source_to_llvm |
    $opt_tool ${typeart_plugin} ${typeart_heap_mode_args} ${ta_more_args} |
    $opt_tool ${cucorr_plugin} ${more_args} |
    # $opt_tool  -passes="tsan-module,tsan" -S |
    $opt_tool ${optimize} -S |
    $opt_tool ${typeart_plugin} ${typeart_stack_mode_args} ${ta_more_args} -S

}

function cucorr_compile() {
  local llc_flags="--filetype=obj"
  if [ "$optimize" == "-O0" ]; then
    if [ $show_cuda_ir == 0 ] && [ $show_cuda_host_ir == 0 ]; then
      cucorr_apply_pass | $llc_tool -x=ir ${llc_flags} -o "${object_file}"
    else
      cucorr_apply_pass
    fi
  else
    if [ $show_cuda_ir == 0 ] && [ $show_cuda_host_ir == 0 ]; then
      cucorr_apply_pass_optim | $llc_tool -x=ir ${llc_flags} -o "${object_file}"
    else
      cucorr_apply_pass_optim
    fi
  fi
}

function cucorr_main_link() {
  $compiler ${cucorr_san_flags} ${cucorr_ldflags} "${object_file}" -o "${exe_file}"
}

function cucorr_execute() {
  export TSAN_OPTIONS='ignore_noninstrumented_modules=1'
  echo -e Executing with runtime lib
  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:${cucorr_lib_dir}" "${exe_file}"
}

function parse_commands() {
  parse_cuda_cmd_line "$@"
  cucorr_parse_cmd_line ${typeart_non_cuda_args}
}

function cucorr_main_in() {
  parse_commands "$@"
  cucorr_global_init
  cucorr_toolchain_init
  cucorr_compile
  if [ @CUCORR_RUN_SCRIPT@ == 1 ]; then
    cucorr_main_link
    cucorr_execute
  fi
}

cucorr_main_in "$@"
