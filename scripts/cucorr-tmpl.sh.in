#!/bin/bash
#
# cucorr library
#

function cucorr_parse_cmd_line() {
  readonly source_file=$1
  optimize=""
  with_omp=0

  shift # skip over $1
  while (("$#")); do
    case "$1" in
    -o | --optimization)
      if [ -n "$2" ] && [ "${2:0:2}" == "-O" ]; then
        optimize=$2
        shift 2
      else
        echo "Error: Optimization argument for $1 is erroneous: $2" >&2
        exit 1
      fi
      ;;
    --object)
      if [ -n "$2" ]; then
        object_file="$2"
        shift 2
      else
        echo "Error: Object file argument for $1 is missing." >&2
        shift
      fi
      ;;
    --executable)
      if [ -n "$2" ]; then
        exe_file="$2"
        shift 2
      else
        echo "Error: Executable file argument for $1 is missing." >&2
        shift
      fi
      ;;
    --omp)
      with_omp=1
      shift
      ;;
    *) # preserve other arguments
      more_args="$more_args $1"
      shift
      ;;
    esac
  done

  if [ -z "${object_file}" ]; then
    # use filename(source_file).o
    object_file="${source_file%.*}".o
  fi

  if [ -z "${exe_file}" ]; then
    # use filename(source_file).o
    exe_file="${source_file%.*}".exe
  fi

  if [ -z "${optimize}" ]; then
    optimize=-O0
  fi
}

function cucorr_global_init() {
  readonly opt_tool=@CUCORR_OPT_EXEC@
  readonly llc_tool=@CUCORR_LLC_EXEC@

  local -r cucorr_pass="$<TARGET_FILE:cucorr::TransformPass>"
  local -r cucorr_lib_dir="$<TARGET_FILE_DIR:cucorr::Runtime>"
  readonly cucorr_ldflags="-L${cucorr_lib_dir}/ \
                   -Wl,-rpath,${cucorr_lib_dir}/ \
                   -l$<TARGET_FILE_BASE_NAME:cucorr::Runtime>"

  readonly cucorr_includes="@CUCORR_INCLUDE_DIRS@"
  readonly cucorr_plugin="-load "${cucorr_pass}" -cucorr"
}

function cucorr_toolchain_init() {
  readonly extension="${source_file##*.}"

  case "$extension" in
  c)
    compiler=@CUCORR_CLANG_EXEC@
    if [ $with_omp == 1 ]; then
      readonly omp_flags="@OpenMP_C_FLAGS@"
    fi
    ;;
  cc | cxx | cpp)
    compiler=@CUCORR_CLANGCXX_EXEC@
    if [ $with_omp == 1 ]; then
      readonly omp_flags="@OpenMP_CXX_FLAGS@"
    fi
    ;;
  esac

  readonly cucorr_san_flags="@CUCORR_SAN_FLAGS@"
}

function cucorr_source_to_llvm() {
  $compiler ${omp_flags} ${cucorr_includes} ${cucorr_san_flags} \
    -O1 ${compile_flags} -Xclang -disable-llvm-passes -S -emit-llvm "${source_file}" -o -
}

function cucorr_apply_pass() {
  cucorr_source_to_llvm |
    $opt_tool ${cucorr_plugin} ${more_args}
}

function cucorr_apply_pass_optim() {
  cucorr_source_to_llvm |
    $opt_tool ${optimize} -S |
    $opt_tool ${cucorr_plugin} ${more_args}
}

function cucorr_compile() {
  local llc_flags="--filetype=obj"
  if [ "$optimize" == " " ]; then
    cucorr_apply_pass | $llc_tool -x=ir ${llc_flags} -o "${object_file}"
  else
    cucorr_apply_pass_optim | $llc_tool -x=ir ${llc_flags} -o "${object_file}"
  fi
}

function cucorr_main_link() {
  $compiler ${cucorr_san_flags} ${cucorr_ldflags} "${object_file}" -o "${exe_file}"
}

function cucorr_execute() {
  export TSAN_OPTIONS='ignore_noninstrumented_modules=1'
  echo -e Executing with runtime lib
  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:${cucorr_lib_dir}" "${exe_file}"
}

function cucorr_main_in() {
  cucorr_parse_cmd_line "$@"
  cucorr_global_init
  cucorr_toolchain_init
  cucorr_compile
  if [ @CUCORR_RUN_SCRIPT@ == 1 ]; then
    cucorr_main_link
    cucorr_execute
  fi
}

cucorr_main_in "$@"
